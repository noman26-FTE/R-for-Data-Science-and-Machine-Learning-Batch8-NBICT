var1= 500
print('var1')
print(var1)
var_2= mobile
var_2= 'mobile'
print(var_2)
assign('var5', 400)
print(var5)
if_=30
if2= 'mobile phone'
print(class(if_))
print(class(if2))
print(ls())
#find variables
print(ls(all.names = TRUE))
rm(var5)
print(ls(all.names = TRUE))
var5=300
print(ls(all.names = TRUE))
6*8
library(readxl)
data_MoST_24_25 <- read_excel("Desktop/Article/R/All works/data MoST 24-25.xlsx",
sheet = "Sheet4", range = "A1:AA87")
View(data_MoST_24_25)
library(readxl)
pc <- read_excel("Desktop/Article/R/All works/data MoST 24-25.xlsx",
sheet = "Sheet4", range = "A1:AA87")
View(pc)
library(devtools)
install.packages('devtools')
library(devtools)
library(devtools)
library(ggbiplot)
library(devtools)
library(ggbiplot)
library(ggplot2)
pca = prcomp(pc[-1],
center = TRUE,
scale. = TRUE)
pca$scale
print(pca)
summary(pca)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)
View(g)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal',
legend.position = 'right')
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal',
legend.position = 'right')
print(g)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'vertical',
legend.position = 'top')
print(g)
#Quick data summary visualization
ggplot(summs, aes(x = irr, y = mean, group = fert , color = fert)) +
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
facet_wrap(~ fert, nrow = 1) +
labs(title = "Mean Crop Yield by Irrigation",
x = "Irrigation",
y = "Mean Crop Yield") +
theme_classic(base_size = 12)
setwd("~/Desktop/Article/R/All works/R-for-Data-Science-and-Machine-Learning-Batch8-NBICT/RDSML-Day-39 ðŸ‘‰ Two-way ANOVA in R (Part-1)")
#Two way anova
cropdata
#Two way anova
cropdata
str(cropdata)
library(readr)
cropdata <- read_csv("cropdata.csv")
View(cropdata)
#Two way anova
cropdata
str(cropdata)
View(cropdata)
#If we have two types grouping varaibles and one continuous response variable, we can use two way anova
#Installing packages
install.packages(c("dplyr","ggplot2","car", 'tidyverse', 'ggpubr', 'emmeans', 'effectsize','performance', 'broom', 'kableExtra'))
#Loading packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyverse)
library(ggpubr)
library(emmeans)
library(effectsize)
library(performance)
library(broom)
library(kableExtra)
#Importing data
d = cropdata
#Quick EDA- exploratory descriptive analysis
summs = d %>%
group_by(fert, irr) %>%
summarise(
mean = mean(y),
se = sd(y)/sqrt(n()),
.groups = 'drop')
#Quick data summary visualization
ggplot(summs, aes(x = irr, y = mean, group = fert , color = fert)) +
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = 0.2) +
facet_wrap(~ fert, nrow = 1) +
labs(title = "Mean Crop Yield by Irrigation",
x = "Irrigation",
y = "Mean Crop Yield") +
theme_classic(base_size = 12)
m = aov(y ~ fert + irr + fert * irr, data = d)
summary(m)
par(mfrow = c(1, 2))
hist(residuals(m), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(residuals(m))
qqline(residuals(m), col = "red")
shapiro.test(residuals(m))
#2. Homogeneity of variances
plot(m, 1)
leveneTest(residuals(m) ~ d$fert * d$irr)
#Checking anova assumptions visually
plot(m)
#Checking anova assumptions visually
plot(m)
#Checking anova assumptions visually
plot(m)
#Checking anova assumptions visually
plot(m)
par(mfrow = c(2,2))
plot(m)
par(mfrow = c(1,1))
#Checking the residulas normality
shapiro.test(residuals(m))
#Checking the residulas normality
residuals(m)
View(summs)
#Checking the residulas normality
res = residuals(m)
shapiro.test(res)
#Checking homogeneity of variance
leveneTest(m)
#Checking homogeneity of variance
leveneTest(m)
#Checking homogeneity of variance
library(car)
leveneTest(m)
library(car)
leveneTest(y~fert * irr, data = d)
leveneTest(y~fert * irr, data = d, center = median)
car::leveneTest(y~fert * irr, data = d, center = median)
library(car)
leveneTest(y~fert * irr, data = d, center = median)
#p-value > 0.05, we can assume homogeneity of variance
#If the assumptions are not met, we can use transformations or non-parametric tests
#For example, we can use log transformation
d$log_y = log(d$y)
m2 = aov(log_y ~ fert + irr + fert * irr, data = d)
View(data_MoST_24_25)
#p-value > 0.05, we can assume homogeneity of variance
#If the assumptions are not met, we can use transformations or non-parametric tests
#For example, we can use log transformation
d$log_y = log(d$y)
View(d)
m2 = aov(log_y ~ fert + irr + fert * irr, data = d)
summary(m2)
par(mfrow = c(2,2))
plot(m2)
par(mfrow = c(1,1))
res2 = residuals(m2)
shapiro.test(res2)
leveneTest(log_y~fert * irr, data = d, center = median)
#Posthoc tests
library(emmeans)
emmeans(m, pairwise ~ fert)
emmeans(m, pairwise ~ irr)
emmeans(m, pairwise ~ fert * irr)
#Tukey's HSD
TukeyHSD(m)
TukeyHSD(m, "fert")
TukeyHSD(m, "irr")
TukeyHSD(m, "fert:irr")
#Interaction contrasts (simple effects): effect of fert at each level of irr
library(emmeans)
contrasts (emmeans(m, ~ fert | irr))
contrasts (emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
library(emmeans)
contrasts (emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
library(emmeans)
contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
