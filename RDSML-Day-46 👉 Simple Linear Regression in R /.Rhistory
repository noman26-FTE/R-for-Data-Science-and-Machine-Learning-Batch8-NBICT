var1= 500
print('var1')
print(var1)
var_2= mobile
var_2= 'mobile'
print(var_2)
assign('var5', 400)
print(var5)
if_=30
if2= 'mobile phone'
print(class(if_))
print(class(if2))
print(ls())
#find variables
print(ls(all.names = TRUE))
rm(var5)
print(ls(all.names = TRUE))
var5=300
print(ls(all.names = TRUE))
6*8
library(readxl)
data_MoST_24_25 <- read_excel("Desktop/Article/R/All works/data MoST 24-25.xlsx",
sheet = "Sheet4", range = "A1:AA87")
View(data_MoST_24_25)
library(readxl)
pc <- read_excel("Desktop/Article/R/All works/data MoST 24-25.xlsx",
sheet = "Sheet4", range = "A1:AA87")
View(pc)
library(devtools)
install.packages('devtools')
library(devtools)
library(devtools)
library(ggbiplot)
library(devtools)
library(ggbiplot)
library(ggplot2)
pca = prcomp(pc[-1],
center = TRUE,
scale. = TRUE)
pca$scale
print(pca)
summary(pca)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)
View(g)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal',
legend.position = 'right')
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal',
legend.position = 'right')
print(g)
g = ggbiplot(pca,
obs.scale = 1,
var.scale = 1,
groups = pc$water,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)+
scale_color_discrete(name = '') +
theme(legend.direction = 'vertical',
legend.position = 'top')
print(g)
rnorm(3, mean = 0.92, sd = 0.05)
rnorm(3, mean = 1.24, sd = 0.03)
rnorm(3, mean = 75.93, sd = 0.34)
rnorm(3, mean = 1.66, sd = 0.02)
rnorm(3, mean = 1.45, sd = 0.07)
rnorm(3, mean = 1.26, sd = 0.04)
rnorm(3, mean = 81.65, sd = 0.12)
rnorm(3, mean = 1.41, sd = 0.04)
rnorm(3, mean = 3.47, sd = 0.24)
rnorm(3, mean = 1.15, sd = 0.003)
rnorm(3, mean = 85.10, sd = 0.21)
rnorm(3, mean = 1.13, sd = 0.009)
setwd("~/Desktop/Article/R/All works/R-for-Data-Science-and-Machine-Learning-Batch8-NBICT/RDSML-Day-46 ðŸ‘‰ Simple Linear Regression in R ")
dataset = read.csv('Salary_Data.csv')
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Fitting simple linear regression model to the training set
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
regressor
#Fitting simple linear regression model to the training set
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
View(training_set)
View(test_set)
#Checking the summary of the model
summary(regressor)
#Predicting the test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
#Visualising the training set results
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of Experience') +
ylab('Salary')
#Independant sample t test to compare the means of two independent groups
t.test(test_set$Salary, y_pred)
#Visualising the test set results
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary)
ggplot() +
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of Experience') +
ylab('Salary')
#Visualizing the test set results
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of Experience') +
ylab('Salary')
#Predicting the test set results
y_pred = predict(regressor, newdata = training_set)
y_pred
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red') +
geom_point(aes(x = training_set$YearsExperience, y = y_pred), colour = 'blue')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = y_pred), colour = 'blue')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = y_pred), colour = 'blue')+
ggtitle('salary vs Experience')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = y_pred), colour = 'blue')+
ggtitle('salary vs Experience')+
xlab('years of Experience')+
ylab('salary')
#Visualizing the test set results
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary), colour = 'red') +
geom_line(aes(x = test_set$YearsExperience, y = predict(regressor, newdata = test_set)), colour = 'blue')+
ggtitle('salary vs Experience')+
xlab('years of Experience')+
ylab('salary')
